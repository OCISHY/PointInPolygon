# -*- coding: UTF-8 -*-
import time
import Wall from pointinpolygon

# http://alienryderflex.com/polygon/ 需vpn访问
# http://www.cnblogs.com/LBSer/p/4471742.html 不规则图形优化
# 极坐标/ GPS坐标

# 很多人都写过要问这个代码是否可以应用于极坐标（GPS），即使用X的经度和Y的纬度。我认为答案是肯定的，但通常只有多边形仅限于相对较小的区域（例如美国州）。需要注意的两个问题是：

# 1。如果你的多边形有任何单侧在地球上穿过一个很大的距离，那么指向多边形算法将沿着一条明显弯曲的路径（特别是靠近两极），而不是真正的最短距离路径。你可能更喜欢。如果确保多边形的任何一侧都没有穿过很远的距离，则可以避免此问题。

# 2.如果您的多边形穿过国际日期线，那么算法将因经度的突然重置而完全混淆。可能需要在某些角落的经度上加上或减去360°以防止这种情况发生。（但是如果多边形完全围绕北极或南极，那么该解决方案将无法工作。）

# test
polyX = [123.425658, 123.425843, 123.425847, 123.42693, 123.426943, 123.427118, 123.427066, 123.426896, 123.426916, 123.425838, 123.425804, 123.425611]
polyY = [41.774177, 41.774166, 41.774119, 41.774062, 41.774099, 41.774089, 41.773548, 41.773544, 41.773920, 41.773961, 41.773585, 41.773595]
aim = [123.42699, 41.773592]

start = time.clock()
for i in range(0, 100):
	test =  Wall(len(polyX), polyX, polyY)
	test.precalc_values()
	test.pointInPolygon(aim[0], aim[1])
end = time.clock()
print(end - start)
